devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
install.packages("covid19italy")
# install.packages("devtools")
# devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
library(coronavirus)
data(coronavirus)
update_datasets()
update_datasets()
# install.packages("devtools")
# devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
library(coronavirus)
data(coronavirus)
update_datasets()
update_datasets()
# install.packages("devtools")
# devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
library(coronavirus)
data(coronavirus)
update_datasets()
libary
library(coronavirus)
data("coronavirus")
update_datasets()
# install.packages("devtools")
# devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
library(coronavirus)
data(coronavirus)
update_datasets()
update_datasets()
max(date)
update_datasets()
max(coronavirus$date)
View(coronavirus)
date
max(date)
max(coronavirus$date)
max(coronavirus$date[Country=="Malaysia"])
max(coronavirus$date[ ,Country=="Malaysia"])
max(coronavirus$date[ ,coronavirus$Country=="Malaysia"])
max(coronavirus$date, coronavirus$Country=="Malaysia")
devtools::install_github("RamiKrispin/coronavirus")
devtools::install_github("RamiKrispin/coronavirus")
library(devtools)
devtools::install_github("RamiKrispin/coronavirus")
devtools::install_github("RamiKrispin/coronavirus")
devtools::install_github("RamiKrispin/coronavirus")
# install.packages("devtools")
# devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
library(coronavirus)
data(coronavirus)
update_datasets()
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
# install.packages("devtools")
# devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
library(coronavirus)
data(coronavirus)
update_dataset()
update_dataset(silence = TRUE)
View(coronavirus)
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
View(coronavirus)
library(devtools)
devtools::install_github("RamiKrispin/coronavirus")
setwd("D:/R")
knitr::opts_chunk$set(echo = TRUE)
PIQ <- read.table("https://www.math.wustl.edu/~jmding/math3200/PIQ.txt",
header=TRUE, sep="", na.strings="NA", dec=".", strip.white=TRUE)
View(PIQ)
RegModel.1 <- lm(PIQ~MRI+Height+Weight, data=PIQ)
summary(RegModel.1)
newdata = data.frame(MRI = 100, Height = 70, Weight = 150)
predictions = predict.lm(RegModel.1, newdata, interval = "prediction")
predictions
cor.matrix = round(cor(MRI, Height, Weight),2)
cor.matrix = cor(MRI, Height, Weight)
cor.matrix = cor(PIQ$MRI, PIQ$Height, PIQ$Weight)
cor.matrix = cor(c(PIQ$MRI, PIQ$Height, PIQ$Weight))
cor.matrix = cor(c(MRI, Height, Weight))
cor.matrix = cor(PIQ[ , c(MRI, Height, Weight)])
cor.matrix = cor(PIQ[ , c(2:4)])
cor.matrix = round(cor.matrix,2)
cor.matrix
cor.matrix = cor(PIQ[ , c(2:4)])
cor.matrix = round(cor.matrix,2)
cor.matrix # correlation matrix
vif(cor.matrix)
cor.matrix = cor(PIQ[ , c(2:4)])
cor.matrix = round(cor.matrix,2)
cor.matrix # correlation matrix
library(car)
vif(cor.matrix)
cor.matrix = cor(PIQ[ , c(2:4)])
cor.matrix = round(cor.matrix,2)
cor.matrix # correlation matrix
library(cars)
cor.matrix = cor(PIQ[ , c(2:4)])
cor.matrix = round(cor.matrix,2)
cor.matrix # correlation matrix
library(car)
vif(cor.matrix)
cor.matrix = cor(PIQ[ , c(2:4)])
cor.matrix = round(cor.matrix,2)
cor.matrix # correlation matrix
library(car)
vif(RegModel.1)
RegModel.2 <- lm(PIQ~MRI+Weight, data=PIQ)
summary(RegModel.2)
RegModel.2 <- lm(PIQ~MRI+Height, data=PIQ)
summary(RegModel.2)
library(Rcmdr)
library(car)
vif(RegModel.1) # report VIF values
library(devtools)
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
library(coronavirus)
data("coronavirus")
update_dataset()
update_datasets()
library(devtools)
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
library(coronavirus)
data("coronavirus")
force(coronavirus)
setwd("D:/R/R Project/Course Note")
knitr::opts_chunk$set(echo = TRUE)
htmltools::img(src = knitr::image_uri("profile2.png"),
alt = 'logo',
style = 'position:absolute; top:0; left:0; padding:10px;')
library(devtools)
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
library(coronavirus)
data("coronavirus")
force(coronavirus)
install.packages("rlang")
library(coronavirus)
data("coronavirus")
update_dataset()
library(coronavirus)
data("coronavirus")
force(coronavirus)
library(coronavirus)
data
data("coronavirus")
force(coronavirus)
update_dataset()
library(coronavirus)
data("coronavirus")
force(coronavirus)
library(coronavirus)
data("coronavirus")
force(coronavirus)
update_dataset()
library(coronavirus)
data("coronavirus")
force(coronavirus)
setwd("D:/R/R Project/COVID19")
knitr::opts_chunk$set(echo = TRUE)
df <- read_csv(url('https://covid.ourworldindata.org/data/ecdc/full_data.csv'))
install.packages("purrrlyr")
library(coronavirus)
update_dataset()
library(coronavirus)
data("coronavirus")
force(coronavirus)
library(coronavirus)
update_dataset()
setwd("D:/R")
install.packages(c("urca", "forecast"))
library(urca)
data()
goog %>% ur.kpss() %>% summary()
library(tidyverse)
goog %>% ur.kpss() %>% summary()
data1 <- data("AirPassengers")
force(AirPassengers)
data1 %>% ur.kpss() %>% summary()
data1 <- ts(myvector, start=c(1949, 1), end=c(1960, 12), frequency=12)
library(forecast)
data1 <- ts(myvector, start=c(1949, 1), end=c(1960, 12), frequency=12)
data("AirPassengers")
data1 <- ts(myvector, start=c(1949, 1), end=c(1960, 12), frequency=12)
data1 <- ts(data="AirPassenger", start=c(1949, 1), end=c(1960, 12), frequency=12)
View(data1)
data1 <- ts(start=c(1949, 1), end=c(1960, 12), frequency=12)
View(data1)
mydata <- data("AirPassengers")
data1 <- ts(mydata, start=c(1949, 1), end=c(1960, 12), frequency=12)
View(data1)
data("AirPassengers")
mydata <- AirPassengers
data1 <- ts(mydata, start=c(1949, 1), end=c(1960, 12), frequency=12)
View(data1)
data1 %>% ur.kpss() %>% summary()
data1 %>% diff() %>% ur.kpss() %>% summary()
plot(data1)
data("AirPassengers")
mydata <- AirPassengers
data1 <- ts(mydata, start=c(1949, 1), end=c(1960, 12), frequency=12)
View(data1)
plot(data1)
test1 <- data1 %>% ur.kpss() %>% summary()
library(urca)
test1 <- data1 %>% ur.kpss() %>% summary()
data1 <- ts(mydata, start=c(1949, 1), end=c(1960, 12), frequency=12)
View(data1)
plot(data1)
test1 <- data1 %>% ur.kpss() %>% summary()
library(tidyverse)
test1 <- data1 %>% ur.kpss() %>% summary()
test1
test2 <- data1 %>% diff() %>% ur.kpss() %>% summary()
test2
# fit an ARIMA model of order P, D, Q
fit <- arima(data1, order=c(p, d, q)
)
library(forecast)
# fit an ARIMA model of order P, D, Q
fit <- arima(data1, order=c(p, d, q))
# fit an ARIMA model of order P, D, Q
fit <- auto.arima(data1)
fit2 <- arima(data1, order=c(0, 1, 0)) # 0 order AR, first differencing, 0 order MA
# predictive accuracy
accuracy(fit)
accuracy(fit2)
# summary of fit models
fit
fit2
# predict next 5 observations
forecast(fit, 5)
plot(forecast(fit, 5))
forecast(fit2, 5)
plot(forecast(fit2, 5))
# fit an ARIMA model of order P, D, Q
fit2 <- arima(data1, order=c(2, 1, 1)) # 2nd order AR, first differencing, 1st order MA
fit2
accuracy(fit2)
# predictive accuracy
accuracy(fit)
forecast(fit2, 5)
plot(forecast(fit2, 5))
library(tidyverse)
library(urca)
library(forecast)
data("AirPassengers")
library(tidyverse)
library(urca)
library(forecast)
data("AirPassengers")
mydata <- AirPassengers
data1 <- ts(mydata, start=c(1949, 1), end=c(1960, 12), frequency=12)
View(data1)
plot(data1)
# checking stationarity using kpss (refer page 301 from the ebook)
test1 <- data1 %>% ur.kpss() %>% summary()
test1
test2 <- data1 %>% diff() %>% ur.kpss() %>% summary()
test2
ndiffs(data1)
# Automated forecasting using an ARIMA model
fit <- auto.arima(data1)
# fit an ARIMA model of order P, D, Q
fit2 <- arima(data1, order=c(2, 1, 1)) # 2nd order AR, first differencing, 1st order MA
# summary of fit models
fit
fit2
# predictive accuracy
accuracy(fit)
accuracy(fit2)
# predict next 5 observations
forecast(fit, 5)
plot(forecast(fit, 5))
forecast(fit2, 5)
plot(forecast(fit2, 5))
library(coronavirus)
update_dataset()
library(coronavirus)
data
data("coronavirus")
force(coronavirus)
update_dataset()
library(coronavirus)
update_dataset()
install.packages("processx")
library(coronavirus)
update_dataset()
library(coronavirus)
update_dataset()
library(coronavirus)
update_dataset()
install.packages("installr")
library(installr)
library(installr)
install.packages(c("arm", "broom", "colourvalues", "covid19italy", "dbplyr", "DiagrammeR", "graphlayouts", "kutils", "mnormt", "modelr", "openxlsx", "RcppArmadillo", "renv", "reshape2", "rpf", "scales", "sf", "systemfonts", "tidyr", "tidyselect", "vctrs", "zoo"))
install.packages("rmarkdown")
install.packages("evaluate")
install.packages("htmltools")
install.packages("digest")
install.packages("rlang")
install.packages("Rcpp")
install.packages("knitr")
install.packages("xfun")
install.packages("yaml")
install.packages("flexdashboard")
install.packages("jsonlite")
install.packages("stringr")
install.packages("stringi")
install.packages("magrittr")
install.packages("devtools")
library(devtools)
install.packages("usethis")
library(devtools)
install.packages("fs")
library(devtools)
install.packages("glue")
library(devtools)
install.packages("cli")
library(devtools)
install.packages("assertthat")
library(devtools)
install.packages("crayon")
install.packages("devtools")
library(devtools)
install.packages("fansi")
library(devtools)
install.packages("ellipsis")
library(devtools)
install.packages("memoise")
library(devtools)
install.packages("pkgbuild")
library(devtools)
install.packages("R6")
library(devtools)
install.packages("callr")
library(devtools)
install.packages("processx")
library(devtools)
install.packages("ps")
library(devtools)
install.packages("prettyunits")
library(devtools)
install.packages("pkgload")
library(devtools)
install.packages("withr")
library(devtools)
install.packages("desc")
library(devtools)
install.packages("rprojroot")
library(devtools)
install.packages("backports")
library(devtools)
install.packages("testthat")
library(devtools)
install.packages("remotes")
library(devtools)
install.packages("sessioninfo")
library(devtools)
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
install.packages("tidyverse")
install.packages("dplyr")
install.packages("pkgconfig")
install.packages("tibble")
install.packages("lifecycle")
install.packages("pillar")
install.packages("purrr")
install.packages("plotly")
install.packages("ggplot2")
install.packages("gtable")
install.packages("scales")
install.packages("scales")
devtools::install_github("r-lib/scales")
install.packages("munsell")
devtools::install_github("r-lib/scales")
install.packages("colorspace")
devtools::install_github("r-lib/scales")
install.packages("data.table")
install.packages("htmlwidgets")
install.packages("httr")
install.packages("lazyeval")
install.packages("viridisLite")
install.packages("crosstalk")
install.packages("DT")
library(coronavirus)
update_dataset()
install.packages("vctrs")
library(coronavirus)
update_dataset()
library(coronavirus)
update_dataset()
library(coronavirus)
update_dataset()
library(devtools)
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
detach("package:coronavirus", unload = TRUE)
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
library(coronavirus)
update_dataset()
update_dataset()
install.packages("glue")
update_dataset()
library(coronavirus)
update_dataset()
install.packages(c("backports", "sfheaders"))
install.packages(c("backports", "sfheaders"))
library(coronavirus)
update_dataset()
install.packages("glue")
update_dataset()
install.packages("tidyverse")
library(devtools)
devtools::install_github("tidyverse/glue")
library(coronavirus)
update_dataset()
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
devtools::install_github("tidyverse/glue", force = TRUE)
library(devtools)
library(devtools)
devtools::install_github("tidyverse/glue", force = TRUE)
install.packages("glue")
library(devtools)
devtools::install_github("tidyverse/glue", force = TRUE)
library(coronavirus)
update_dataset()
library(coronavirus)
update_dataset()
library(coronavirus)
library(devtools)
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
install.packages("coronavirus")
library(coronavirus)
update_dataset()
library(coronavirus)
update_dataset()
library(coronavirus)
update_dataset()
library(devtools)
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
detach("package:coronavirus", unload = TRUE)
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
setwd("D:/R/R Project")
install.packages(c("reactable", "rio"))
library(reactable)
library(dplyr)
nicar <- rio::import("nicar.csv")
nicar <- rio::import("nicar.csv")
nicar <- nicar %>%
mutate(
Resource = glue::glue("<a title = '{What}' href='{TheURL}'>{What}</a>")
) %>%
select(Resource, Who, Tags, Type, Comments)
# create a basic, default reactable table.
reactable(nicar)
# In the next code group, I add a search box to the table and little arrow icons showing that the columns are sortable.
reactable(nicar, searchable = TRUE, showSortable = TRUE, showSortIcon = TRUE)
# To tell reactable to display the Resource column as HTML, I use the columns argument and a list where colDef sets the attributes of one or more columns.
# Below, I’m setting html = true for the Resource column so it displays as HTML, and I’m also making that column resizable.
reactable(nicar, searchable = TRUE, showSortable = TRUE, showSortIcon = TRUE,
columns = list(
Resource = colDef(html = TRUE, resizable = TRUE)
)
)
# To tell reactable not to display the Comments column in the main table, I set colDef(show = FALSE).
reactable(nicar, searchable = TRUE, showSortable = TRUE, showSortIcon = TRUE,
columns = list(
Resource = colDef(html = TRUE, resizable = TRUE),
Comments = colDef(show = FALSE)
)
)
# To tell reactable to display the Resource column as HTML, I use the columns argument and a list where colDef sets the attributes of one or more columns.
# Below, I’m setting html = true for the Resource column so it displays as HTML, and I’m also making that column resizable.
reactable(nicar, searchable = TRUE, showSortable = TRUE, showSortIcon = TRUE,
columns = list(
Resource = colDef(html = TRUE, resizable = TRUE)
)
)
# To tell reactable not to display the Comments column in the main table, I set colDef(show = FALSE).
reactable(nicar, searchable = TRUE, showSortable = TRUE, showSortIcon = TRUE,
columns = list(
Resource = colDef(html = TRUE, resizable = TRUE),
Comments = colDef(show = FALSE)
)
)
# The next step is adding the expandable rows, and that’s a bit more complex:
# Function needed according to Greg Lin, creator of reactable
html <- function(x, inline = FALSE) {
container <- if (inline) htmltools::span else htmltools::div
container(dangerouslySetInnerHTML = list("__html" = x))
}
reactable(nicar, searchable = TRUE, showSortable = TRUE,
columns = list(
Resource = colDef(html = TRUE, resizable = TRUE),
Comments = colDef(show = FALSE)
),
# if there exists a comment, make row expandable
details = function(index) {
if(nicar$Comments[index] != "") {
htmltools::tagList(
html(nicar$Comments[index])
)
}
}
)
library(coronavirus)
update_dataset()
update_dataset()
detach("package:coronavirus", unload = TRUE)
update_dataset()
library(coronavirus)
detach("package:coronavirus", unload = TRUE)
library(devtools)
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
